input PipelineInput {
  type: String
  id: String
  application: String
  name: String
  buildTime: Float
  canceled: Boolean
  limitConcurrent: Boolean
  keepWaitingPipelines: Boolean
  startTime: Float
  endTime: Float
  status: String
  origin: String
  pipelineConfigId: String
  spelEvaluator: String
}

input NotificationsInput {
  id: String
  address: String
  level: String
  type: String
  when: [String]
}

input TriggerInput {
  type: String
  user: String
  rebake: Boolean
  dryRun: Boolean
  strategy: Boolean
  executionId: String
  eventId: String
  enabled: Boolean
  preferred: Boolean
  expectedArtifacts: [String ]
  resolvedExpectedArtifacts: [String]
  notifications: [String ]
  artifacts: [String ]
}

input ContextInput{
  propertyFile: String
  consecutiveErrors: String
  refId: String
  Buildnumber: String
}

input StagesInput {
  id: String
  refId: String
  type: String
  name: String
  startTime: Float
  endTime: Float
  status: String
}

input OutputsInput {
  refId: String
  Buildnumber: String
  GitBranch: String
  GitRepo: String
  JobNumber: String
  canaryimage: String
  startTime: Float
  report: String
  hosturl: String
  key: String
  reason: String
  canaryReportURL: String
  overallScore: Float
  location: String
  trigger: String
  overallResult: String
  trigger_json: String
  executedBy: String
  message: String
  status: String
  comments: String
  navigationalURL: String
  cimage: String
  bimage: String
  prodimage: String
}

input ArtifactInput {
  refId: String
  customKind: Boolean
  location: String
  type: String
  version: String
  reference: String
  name: String
  artifactAccount: String
  account: String
}

input MetadataInput {
  account: String
}

input StagesRelationshipInput {
  s1: String
  s2: String
}

input ContextRelationshipInput{

  c1: String
  s1: String
}

type Mutation {
  createPipeline(input: PipelineInput): Pipeline @cypher(statement:
  """MERGE (p:Pipeline {type: input.type, id: input.id, application: input.application, name: input.name,
  buildTime: input.buildTime, canceled: input.canceled, limitConcurrent: input.limitConcurrent,
  keepWaitingPipelines: input.keepWaitingPipelines, startTime: input.startTime, endTime: input.endTime, status: input.status,
  origin: input.origin, pipelineConfigId: input.pipelineConfigId, spelEvaluator: input.spelEvaluator}) RETURN p""")
  createTrigger(input: TriggerInput): trigger @cypher(statement:
  """MERGE (t:trigger {eventId: input.eventId, dryRun: input.dryRun, rebake: input.rebake, type: input.type,
  enabled: input.enabled, executionId: input.executionId, strategy: input.strategy, user: input.user,
  preferred: input.preferred}) RETURN t""")
  createNotifications(input: NotificationsInput): notifications @cypher(statement:
  """MERGE (n:notifications {address: input.address, level: input.level, type: input.type, when: input.when})
  MERGE (p:Pipeline {id: input.id}) MERGE (p) - [:NOTIFIES] -> (n) RETURN n""")
  createStages(input: StagesInput): stages @cypher(statement:
  """MERGE (s:stages {id: input.id, refId: input.refId, type: input.type, name: input.name,
  startTime: input.startTime, endTime: input.endTime, status: input.status}) RETURN s""")
  createOutputs(input: OutputsInput): outputs @cypher(statement:
  """CREATE (o:outputs {Buildnumber: input.Buildnumber, GitBranch: input.GitBranch, GitRepo: input.GitRepo,
  JobNumber: input.JobNumber, canaryimage: input.canaryimage, startTime: input.startTime, report: input.report,
  hosturl: input.hosturl, key: input.key, reason: input.reason, canaryReportURL: input.canaryReportURL,
  overallScore: input.overallScore, location: input.location, trigger: input.trigger, overallResult: input.overallResult,
  trigger_json: input.trigger_json, executedBy: input.executedBy, message: input.message, status: input.status,
  comments: input.comments, navigationalURL: input.navigationalURL, cimage: input.cimage, bimage: input.bimage,
  prodimage: input.prodimage}) MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o) RETURN o""")



  createContext(input: ContextInput): context@cypher(statement:

    """CREATE (c:Context{propertyFile: input.propertyFile, buildNumber: input.buildNumber, refId: input.refId

        }) MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:CONTEXTUALIZES] -> (c) RETURN c"""

  )

  ContextMerger(input:ContextRelationshipInput): context@cypher(statement:

  "MERGE (c1:Context { refId: input.c1}) MERGE (s1:Stages { refId: input.s1}) MERGE (c1) - [:NEXT] -> (s1) RETURN s1")





  createdArtifacts(input: ArtifactInput): artifacts @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:CREATED] -> (a)
  CREATE (m:Metadata {account: input.account}) MERGE (a) - [:METADATA] -> (m) RETURN a""")
  boundArtifacts(input: ArtifactInput): artifacts @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:BOUND] -> (a)
  CREATE (m:Metadata {account: input.account}) MERGE (a) - [:METADATA] -> (m) RETURN a""")
  optionalArtifacts(input: ArtifactInput): artifacts @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:OPTIONAL] -> (a)
  CREATE (m:Metadata {account: input.account}) MERGE (a) - [:METADATA] -> (m) RETURN a""")
  requiredArtifacts(input: ArtifactInput): artifacts @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:REQUIRED] -> (a)
  CREATE (m:Metadata {account: input.account}) MERGE (a) - [:METADATA] -> (m) RETURN a""")
  artifacts(input: ArtifactInput): artifacts @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:ARTIFACT] -> (a)
  CREATE (m:Metadata {account: input.account}) MERGE (a) - [:METADATA] -> (m) RETURN a""")

  createStageTimeline(input: StagesRelationshipInput): stages @cypher(statement:
  "MERGE (s1:stages { refId: input.s1}) MERGE (s2:Stages { refId: input.s2}) MERGE (s1) - [:NEXT] -> (s2) RETURN s2")
  createStageTrigger(input: StagesRelationshipInput): stages @cypher(statement:
  "MERGE (s1:trigger { executionId: input.s1}) MERGE (s2:Stages { refId: input.s2}) MERGE (s1) - [:NEXT] -> (s2) RETURN s2")
  createPipelineTrigger(input: StagesRelationshipInput): Pipeline @cypher(statement:
  "MERGE (s1:trigger { executionId: input.s1}) MERGE (s2:Pipeline {id: input.s2}) MERGE (s2) - [:NEXT] -> (s1) RETURN s2")

  attachStages(input: StagesRelationshipInput): stages @cypher(statement:
  """MATCH (s1:stages { refId: input.s1}) MATCH (s2:stages { refId: input.s2}) MATCH (o1:outputs) <-- (s1)
  MATCH (c1:context) <-- (s2) CREATE (s1) - [:NEXT] -> (s2) CREATE (o1) - [:NEXT] -> (c1) RETURN s1""")
  attachTrigger(input: StagesRelationshipInput): stages @cypher(statement:
  "MERGE (s1:trigger { executionId: input.s1}) MERGE (s2:stages { refId: input.s2}) MERGE (s1) - [:NEXT] -> (s2) RETURN s2")
  attachPipeline(input: StagesRelationshipInput): Pipeline @cypher(statement:
  "MERGE (s1:trigger { executionId: input.s1}) MERGE (s2:Pipeline {id: input.s2}) MERGE (s2) - [:NEXT] -> (s1) RETURN s2")

  deleteAll: Pipeline @cypher(statement: "MATCH (a) DETACH DELETE a")
}

type metadata {
    generation: Float
    uid: String
    resourceVersion: String
    name: String
    namespace: String
    creationTimestamp: String
    annotations: annotations @relation(name: "NEXT", direction: OUT)
    id: String
    generateName: String
    account: String
    labels: [String]
    
}

type connectors {
    connectorType: String
    helpText: String
    values: [values] @relation(name: "NEXT", direction: OUT)
    supportedParams: [supportedParams] @relation(name: "NEXT", direction: OUT)
    label: String
    isMultiSupported: Boolean
    
}

type kato_tasks {
    resultObjects: [resultObjects] @relation(name: "NEXT", direction: OUT)
    id: String
    history: [history] @relation(name: "NEXT", direction: OUT)
    status: String
    
}

type securityContext {
    id: String
    
}

type statusCategory {
    colorName: String
    name: String
    self: String
    id: String
    key: String
    
}

type resolution {
    name: String
    self: String
    description: String
    id: String
    
}

type context {
    deploy_account_name: String
    outputs_createdArtifacts: [outputs_createdArtifacts] @relation(name: "NEXT", direction: OUT)
    propertyFile: String
    webhook: String
    queuedBuild: String
    namespaceOverride: String
    source: String
    buildNumber: Float
    JobNumber: String
    mode: String
    payload: String
    resolvedExpectedArtifacts: [resolvedExpectedArtifacts] @relation(name: "NEXT", direction: OUT)
    kato_last_task_id: kato_last_task_id @relation(name: "NEXT", direction: OUT)
    requiredArtifactIds: [String]
    requiredArtifacts: [requiredArtifacts] @relation(name: "NEXT", direction: OUT)
    artifacts: [artifacts] @relation(name: "NEXT", direction: OUT)
    parameterValues: parameterValues @relation(name: "NEXT", direction: OUT)
    app: String
    method: String
    manifest_account_name: String
    kato_task_terminalRetryCount: Float
    statusUrlResolution: String
    kato_task_firstNotFoundRetry: Float
    failOnFailedExpressions: Boolean
    outputs_manifestNamesByNamespace: outputs_manifestNamesByNamespace @relation(name: "NEXT", direction: OUT)
    messages: [String]
    failedManifests: [String]
    kato_tasks: [kato_tasks] @relation(name: "NEXT", direction: OUT)
    outputs_manifests: [outputs_manifests] @relation(name: "NEXT", direction: OUT)
    deploy_jobs: deploy_jobs @relation(name: "NEXT", direction: OUT)
    hosturl: String
    job: String
    parameters: parameters @relation(name: "NEXT", direction: OUT)
    notification_type: String
    payloadConstraint: [String]
    jobStatus: jobStatus @relation(name: "NEXT", direction: OUT)
    consecutiveErrors: Float
    terminalStatuses: String
    buildInfo: buildInfo @relation(name: "NEXT", direction: OUT)
    credentials: String
    completionDetails: completionDetails @relation(name: "NEXT", direction: OUT)
    statusEndpoint: String
    Buildnumber: String
    GitBranch: String
    consumeArtifactSource: String
    stableManifests: [stableManifests] @relation(name: "NEXT", direction: OUT)
    GitRepo: String
    manifest_location: String
    cloudProvider: String
    kato_result_expected: Boolean
    manifest_name: String
    deploy_server_groups: deploy_server_groups @relation(name: "NEXT", direction: OUT)
    trafficManagement: trafficManagement @relation(name: "NEXT", direction: OUT)
    alias: String
    key: String
    customHeaders: customHeaders @relation(name: "NEXT", direction: OUT)
    statusJsonPath: String
    expectedArtifacts: [expectedArtifacts] @relation(name: "NEXT", direction: OUT)
    progressJsonPath: String
    variables: [variables] @relation(name: "NEXT", direction: OUT)
    comments: String
    replicas: String
    manifest: manifest @relation(name: "NEXT", direction: OUT)
    manifestName: String
    canceledStatuses: String
    moniker: moniker @relation(name: "NEXT", direction: OUT)
    waitForCompletion: Boolean
    url: String
    master: String
    optionalArtifacts: [optionalArtifacts] @relation(name: "NEXT", direction: OUT)
    application: String
    outputs_boundArtifacts: [outputs_boundArtifacts] @relation(name: "NEXT", direction: OUT)
    successStatuses: String
    manifests: [manifests] @relation(name: "NEXT", direction: OUT)
    report: String
    failPipeline: Boolean
    location: String
    kato_task_notFoundRetryCount: Float
    waitTime: Float
    account: String
    skipExpressionEvaluation: Boolean
    continuePipeline: Boolean
    propertyFileContents: propertyFileContents @relation(name: "NEXT", direction: OUT)
    kato_task_lastStatus: String
    
}

type options {
    enableTraffic: Boolean
    services: [String]
    
}

type state {
    terminated: terminated @relation(name: "NEXT", direction: OUT)
    
}

type scm {
    sha1: String
    name: String
    remoteUrl: String
    branch: String
    
}

type tasks {
    stageStart: Boolean
    loopStart: Boolean
    stageEnd: Boolean
    name: String
    startTime: Float
    id: String
    endTime: Float
    loopEnd: Boolean
    implementingClass: String
    status: String
    
}

type requiredArtifacts {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    artifactAccount: String
    type: String
    
}

type matchLabels {
    app: String
    component: String
    controller_uid: String
    
}

type avatarUrls {
    _48x48: String
    _24x24: String
    _16x16: String
    _32x32: String
    
}

type volumes {
    configMap: configMap @relation(name: "NEXT", direction: OUT)
    name: String
    
}

type priority {
    name: String
    self: String
    iconUrl: String
    id: String
    
}

type labels {
    app: String
    app_kubernetes_io_managed_by: String
    component: String
    webhook: String
    job_name: String
    app_kubernetes_io_name: String
    version: String
    controller_uid: String
    
}

type outputs_manifests {
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    apiVersion: String
    kind: String
    spec: spec @relation(name: "NEXT", direction: OUT)
    status: String
    
}

type assignee {
    accountId: String
    avatarUrls: avatarUrls @relation(name: "NEXT", direction: OUT)
    displayName: String
    accountType: String
    self: String
    active: Boolean
    timeZone: String
    
}

type conditions {
    reason: String
    lastTransitionTime: String
    message: String
    type: String
    lastUpdateTime: String
    status: String
    
}

type matchArtifact {
    customKind: Boolean
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    artifactAccount: String
    id: String
    type: String
    
}

type deploy_server_groups {
    id: String
    
}

type notifications {
    address: String
    level: String
    message: String
    type: String
    when: [String]
    
}

type status {
    retryable: Boolean
    phase: String
    containerStatuses: [containerStatuses] @relation(name: "NEXT", direction: OUT)
    hostIP: String
    replicas: String
    readyReplicas: Float
    description: String
    completed: Boolean
    failed: Boolean
    statusCategory: statusCategory @relation(name: "NEXT", direction: OUT)
    updatedReplicas: Float
    availableReplicas: Float
    podIPs: [podIPs] @relation(name: "NEXT", direction: OUT)
    podIP: String
    loadBalancer: loadBalancer @relation(name: "NEXT", direction: OUT)
    name: String
    self: String
    startTime: Float
    qosClass: String
    iconUrl: String
    id: String
    conditions: [conditions] @relation(name: "NEXT", direction: OUT)
    observedGeneration: Float
    
}

type template {
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    spec: spec @relation(name: "NEXT", direction: OUT)
    
}

type jobStatus {
    provider: String
    completionDetails: completionDetails @relation(name: "NEXT", direction: OUT)
    jobState: String
    name: String
    createdTime: Float
    location: String
    pods: [pods] @relation(name: "NEXT", direction: OUT)
    account: String
    
}

type buildInfo {
    duration: Float
    result: String
    number: Float
    name: String
    fullDisplayName: String
    id: String
    scm: [scm] @relation(name: "NEXT", direction: OUT)
    building: Boolean
    url: String
    timestamp: String
    artifacts: [artifacts] @relation(name: "NEXT", direction: OUT)
    
}

type pipeline_failed {
    text: String
    
}

type createdArtifacts {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    location: String
    type: String
    version: String
    
}

type ports {
    protocol: String
    port: Float
    name: String
    containerPort: Float
    targetPort: Float
    
}

type secretKeyRef {
    name: String
    key: String
    
}

type deploy_jobs {
    default: [String]
    
}

type trafficManagement {
    options: options @relation(name: "NEXT", direction: OUT)
    enabled: Boolean
    
}

type variables {
    sourceValue: String
    value: String
    key: String
    
}

type creator {
    accountId: String
    emailAddress: String
    avatarUrls: avatarUrls @relation(name: "NEXT", direction: OUT)
    displayName: String
    accountType: String
    self: String
    active: Boolean
    timeZone: String
    
}

type reporter {
    accountId: String
    emailAddress: String
    avatarUrls: avatarUrls @relation(name: "NEXT", direction: OUT)
    displayName: String
    accountType: String
    self: String
    active: Boolean
    timeZone: String
    
}

type trigger {
    expectedArtifacts: [expectedArtifacts] @relation(name: "NEXT", direction: OUT)
    eventId: String
    dryRun: Boolean
    rebake: Boolean
    type: String
    enabled: Boolean
    executionId: String
    resolvedExpectedArtifacts: [resolvedExpectedArtifacts] @relation(name: "NEXT", direction: OUT)
    strategy: strategy @relation(name: "NEXT", direction: OUT)
    user: String
    parameters: parameters @relation(name: "NEXT", direction: OUT)
    notifications: [notifications] @relation(name: "NEXT", direction: OUT)
    preferred: Boolean
    artifacts: [artifacts] @relation(name: "NEXT", direction: OUT)
    
}

type aggregateprogress {
    total: Float
    progress: Float
    
}

type Pipeline {
    keepWaitingPipelines: Boolean
    pipelineConfigId: String
    systemNotifications: [String]
    buildTime: Float
    spelEvaluator: String
    origin: String
    trigger: String
    type: String
    canceled: Boolean
    limitConcurrent: Boolean
    application: String
    initialConfig: initialConfig @relation(name: "NEXT", direction: OUT)
    name: String
    stages: [stages] @relation(name: "NEXT", direction: OUT)
    startTime: Float
    id: String
    endTime: Float
    notifications: [notifications] @relation(name: "NEXT", direction: OUT)
    status: String
    authentication: authentication @relation(name: "NEXT", direction: OUT)
    
}

type customfield_10315 {
    hasEpicLinkFieldDependency: Boolean
    showField: Boolean
    nonEditableReason: nonEditableReason @relation(name: "NEXT", direction: OUT)
    
}

type manifests {
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    apiVersion: String
    kind: String
    spec: spec @relation(name: "NEXT", direction: OUT)
    status: String
    
}

type outputs_boundArtifacts {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    artifactAccount: String
    type: String
    
}

type progress {
    total: Float
    progress: Float
    
}

type supportedParams {
    helpText: String
    name: String
    label: String
    type: String
    
}

type votes {
    hasVoted: Boolean
    self: String
    votes: Float
    
}

type worklog {
    total: Float
    maxResults: Float
    startAt: Float
    worklogs: [String]
    
}

type propertyFileContents {
    GitRepo: String
    Buildnumber: String
    report: String
    GitBranch: String
    hosturl: String
    JobNumber: String
    key: String
    
}

type outputs {
    outputs_createdArtifacts: [outputs_createdArtifacts] @relation(name: "NEXT", direction: OUT)
    reason: String
    jobStatus: jobStatus @relation(name: "NEXT", direction: OUT)
    buildInfo: buildInfo @relation(name: "NEXT", direction: OUT)
    completionDetails: completionDetails @relation(name: "NEXT", direction: OUT)
    Buildnumber: String
    GitBranch: String
    bimage: String
    JobNumber: String
    prodimage: String
    canaryReportURL: String
    GitRepo: String
    resolvedExpectedArtifacts: [resolvedExpectedArtifacts] @relation(name: "NEXT", direction: OUT)
    startTime: Float
    key: String
    artifacts: [artifacts] @relation(name: "NEXT", direction: OUT)
    requiredArtifacts: [requiredArtifacts] @relation(name: "NEXT", direction: OUT)
    executedBy: String
    comments: String
    manifest: manifest @relation(name: "NEXT", direction: OUT)
    overallScore: Float
    navigationalURL: String
    trigger: String
    overallResult: String
    message: String
    trigger_json: String
    cimage: String
    outputs_manifestNamesByNamespace: outputs_manifestNamesByNamespace @relation(name: "NEXT", direction: OUT)
    optionalArtifacts: [optionalArtifacts] @relation(name: "NEXT", direction: OUT)
    outputs_boundArtifacts: [outputs_boundArtifacts] @relation(name: "NEXT", direction: OUT)
    manifests: [manifests] @relation(name: "NEXT", direction: OUT)
    report: String
    canaryimage: String
    outputs_manifests: [outputs_manifests] @relation(name: "NEXT", direction: OUT)
    hosturl: String
    location: String
    propertyFileContents: propertyFileContents @relation(name: "NEXT", direction: OUT)
    status: String
    
}

type issuetype {
    avatarId: Float
    hierarchyLevel: Float
    name: String
    self: String
    description: String
    entityId: String
    id: String
    iconUrl: String
    subtask: Boolean
    
}

type webhook {
    headers: headers @relation(name: "NEXT", direction: OUT)
    statusEndpoint: String
    statusCodeValue: Float
    monitor: monitor @relation(name: "NEXT", direction: OUT)
    body: body @relation(name: "NEXT", direction: OUT)
    statusCode: String
    
}

type pipeline_complete {
    text: String
    
}

type nonEditableReason {
    reason: String
    message: String
    
}

type annotations {
    artifact_spinnaker_io_name: String
    strategy_spinnaker_io_max_version_history: String
    prometheus_io_path: String
    strategy_spinnaker_io_recreate: String
    prometheus_io_port: String
    deployment_kubernetes_io_revision: String
    artifact_spinnaker_io_type: String
    artifact_spinnaker_io_version: String
    cloud_google_com_neg: String
    strategy_spinnaker_io_versioned: String
    artifact_spinnaker_io_location: String
    prometheus_io_scrape: String
    kubectl_kubernetes_io_last_applied_configuration: String
    moniker_spinnaker_io_cluster: String
    moniker_spinnaker_io_application: String
    
}

type project {
    simplified: Boolean
    avatarUrls: avatarUrls @relation(name: "NEXT", direction: OUT)
    name: String
    self: String
    id: String
    projectTypeKey: String
    key: String
    
}

type manifestNamesByNamespace {
    default: [String]
    deploy_prod: [String]
    deploy_qa: [String]
    
}

type body {
    expand: String
    self: String
    id: String
    fields: fields @relation(name: "NEXT", direction: OUT)
    key: String
    
}

type spec {
    template: template @relation(name: "NEXT", direction: OUT)
    dnsPolicy: String
    clusterIPs: [String]
    terminationGracePeriodSeconds: Float
    ipFamilyPolicy: String
    backoffLimit: Float
    replicas: String
    parallelism: Float
    sessionAffinity: String
    volumes: [volumes] @relation(name: "NEXT", direction: OUT)
    completions: Float
    securityContext: securityContext @relation(name: "NEXT", direction: OUT)
    ports: [ports] @relation(name: "NEXT", direction: OUT)
    type: String
    restartPolicy: String
    ttlSecondsAfterFinished: Float
    ipFamilies: [String]
    containers: [containers] @relation(name: "NEXT", direction: OUT)
    revisionHistoryLimit: Float
    selector: selector @relation(name: "NEXT", direction: OUT)
    strategy: strategy @relation(name: "NEXT", direction: OUT)
    schedulerName: String
    progressDeadlineSeconds: Float
    clusterIP: String
    
}

type volumeMounts {
    mountPath: String
    name: String
    subPath: String
    
}

type resolvedExpectedArtifacts {
    usePriorArtifact: Boolean
    useDefaultArtifact: Boolean
    defaultArtifact: defaultArtifact @relation(name: "NEXT", direction: OUT)
    id: String
    boundArtifact: boundArtifact @relation(name: "NEXT", direction: OUT)
    matchArtifact: matchArtifact @relation(name: "NEXT", direction: OUT)
    
}

type kato_last_task_id {
    id: String
    
}

type artifacts {
    reference: String
    customKind: Boolean
    fileName: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    relativePath: String
    name: String
    location: String
    displayPath: String
    type: String
    version: String
    decorated: Boolean
    
}

type parameterValues {
    summary: String
    cancel: String
    issuetype: String
    issue: String
    success: String
    description: String
    terminate: String
    projectid: String
    retry: String
    
}

type issuerestriction {
    issuerestrictions: issuerestrictions @relation(name: "NEXT", direction: OUT)
    shouldDisplay: Boolean
    
}

type watches {
    self: String
    isWatching: Boolean
    watchCount: Float
    
}

type containerStatuses {
    image: String
    imageID: String
    restartCount: Float
    ready: Boolean
    name: String
    started: Boolean
    state: state @relation(name: "NEXT", direction: OUT)
    containerID: String
    lastState: lastState @relation(name: "NEXT", direction: OUT)
    
}

type history {
    phase: String
    status: String
    
}

type podIPs {
    ip: String
    
}

type configMap {
    defaultMode: Float
    name: String
    
}

type containers {
    args: [String]
    image: String
    imagePullPolicy: String
    terminationMessagePolicy: String
    terminationMessagePath: String
    name: String
    resources: resources @relation(name: "NEXT", direction: OUT)
    ports: [ports] @relation(name: "NEXT", direction: OUT)
    env: [env] @relation(name: "NEXT", direction: OUT)
    command: [String]
    volumeMounts: [volumeMounts] @relation(name: "NEXT", direction: OUT)
    
}

type fields {
    statuscategorychangedate: String
    issuetype: String
    components: [String]
    project: project @relation(name: "NEXT", direction: OUT)
    description: String
    customfield_10373: [String]
    fixVersions: [String]
    resolution: resolution @relation(name: "NEXT", direction: OUT)
    timetracking: timetracking @relation(name: "NEXT", direction: OUT)
    customfield_10105: String
    attachment: [String]
    resolutiondate: String
    workratio: Float
    summary: String
    issuerestriction: issuerestriction @relation(name: "NEXT", direction: OUT)
    watches: watches @relation(name: "NEXT", direction: OUT)
    creator: creator @relation(name: "NEXT", direction: OUT)
    subtasks: [String]
    created: String
    reporter: reporter @relation(name: "NEXT", direction: OUT)
    aggregateprogress: aggregateprogress @relation(name: "NEXT", direction: OUT)
    priority: priority @relation(name: "NEXT", direction: OUT)
    customfield_10344: [String]
    customfield_10300: String
    labels: [String]
    customfield_10315: customfield_10315 @relation(name: "NEXT", direction: OUT)
    customfield_10317: String
    versions: [String]
    progress: Float
    issuelinks: [String]
    votes: Float
    comment: comment @relation(name: "NEXT", direction: OUT)
    assignee: assignee @relation(name: "NEXT", direction: OUT)
    worklog: worklog @relation(name: "NEXT", direction: OUT)
    updated: String
    status: String
    
}

type parameters {
    connectors: [connectors] @relation(name: "NEXT", direction: OUT)
    loadtime: String
    canarystarttime: Float
    log: String
    lifetime: String
    baselinestarttime: Float
    minicanaryresult: String
    serviceip: String
    policyurl: String
    metric: String
    payload: String
    canaryresultscore: String
    gate: String
    gateUrl: String
    gateurl: String
    imageids: String
    imageIds: String
    policypath: String
    
}

type completionDetails {
    reason: String
    exitCode: String
    message: String
    signal: String
    
}

type values {
    artifact: String
    projectKey: String
    jira_ticket_no: String
    buildId: String
    job: String
    branch: String
    
}

type outputs_manifestNamesByNamespace {
    default: [String]
    deploy_prod: [String]
    deploy_qa: [String]
    
}

type lastState {
    id: String
    
}

type boundArtifacts {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    artifactAccount: String
    type: String
    
}

type timetracking {
    id: String
    
}

type outputs_createdArtifacts {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    location: String
    type: String
    version: String
    
}

type stableManifests {
    manifestName: String
    location: String
    
}

type pipeline_starting {
    text: String
    
}

type loadBalancer {
    id: String
    
}

type resultObjects {
    createdArtifacts: [createdArtifacts] @relation(name: "NEXT", direction: OUT)
    deployedNamesByLocation: deployedNamesByLocation @relation(name: "NEXT", direction: OUT)
    manifests: [manifests] @relation(name: "NEXT", direction: OUT)
    manifestNamesByNamespace: manifestNamesByNamespace @relation(name: "NEXT", direction: OUT)
    boundArtifacts: [boundArtifacts] @relation(name: "NEXT", direction: OUT)
    
}

type selector {
    app: String
    matchLabels: matchLabels @relation(name: "NEXT", direction: OUT)
    
}

type rollingUpdate {
    maxSurge: String
    maxUnavailable: String
    
}

type terminated {
    reason: String
    exitCode: String
    startedAt: Float
    containerID: String
    finishedAt: Float
    
}

type customHeaders {
    Authorization: [String]
    Content_Type: [String]
    
}

type authentication {
    allowedAccounts: [String]
    user: String
    
}

type expectedArtifacts {
    usePriorArtifact: Boolean
    displayName: String
    useDefaultArtifact: Boolean
    defaultArtifact: defaultArtifact @relation(name: "NEXT", direction: OUT)
    id: String
    matchArtifact: matchArtifact @relation(name: "NEXT", direction: OUT)
    
}

type issuerestrictions {
    id: String
    
}

type headers {
    date: String
    server: String
    x_envoy_upstream_service_time: String
    vary: String
    expect_ct: String
    strict_transport_security: String
    atl_traceid: String
    set_cookie: String
    nel: String
    x_content_type_options: String
    x_xss_protection: String
    x_arequestid: String
    content_type: String
    x_aaccountid: String
    report_to: String
    timing_allow_origin: String
    cache_control: String
    
}

type manifest {
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    apiVersion: String
    kind: String
    spec: spec @relation(name: "NEXT", direction: OUT)
    status: String
    
}

type resources {
    id: String
    
}

type defaultArtifact {
    customKind: Boolean
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    id: String
    
}

type monitor {
    headers: headers @relation(name: "NEXT", direction: OUT)
    statusCodeValue: Float
    body: body @relation(name: "NEXT", direction: OUT)
    statusCode: String
    progressMessage: String
    
}

type moniker {
    app: String
    
}

type boundArtifact {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    type: String
    
}

type env {
    name: String
    value: String
    valueFrom: valueFrom @relation(name: "NEXT", direction: OUT)
    
}

type message {
    pipeline_complete: pipeline_complete @relation(name: "NEXT", direction: OUT)
    pipeline_starting: pipeline_starting @relation(name: "NEXT", direction: OUT)
    pipeline_failed: pipeline_failed @relation(name: "NEXT", direction: OUT)
    
}

type valueFrom {
    secretKeyRef: secretKeyRef @relation(name: "NEXT", direction: OUT)
    
}

type optionalArtifacts {
    customKind: Boolean
    reference: String
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    name: String
    location: String
    type: String
    version: String
    
}

type initialConfig {
    id: String
    
}

type deployedNamesByLocation {
    default: [String]
    
}

type stages {
    nextStage: stages @relation(name: "NEXT", direction: OUT)
    outputs: outputs @relation(name: "NEXT", direction: OUT)
    requisiteStageRefIds: [String]
    name: String
    context: context @relation(name: "NEXT", direction: OUT)
    startTime: Float
    id: String
    refId: String
    endTime: Float
    type: String
    tasks: [tasks] @relation(name: "NEXT", direction: OUT)
    status: String
    
}

type pods {
    name: String
    status: String
    
}

type comment {
    total: Float
    comments: String
    maxResults: Float
    self: String
    startAt: Float
    
}

type strategy {
    type: String
    rollingUpdate: rollingUpdate @relation(name: "NEXT", direction: OUT)
    
}

type Query {
    metadata: [metadata]
    connectors: [connectors]
    kato_tasks: [kato_tasks]
    securityContext: [securityContext]
    statusCategory: [statusCategory]
    resolution: [resolution]
    context: [context]
    options: [options]
    state: [state]
    scm: [scm]
    tasks: [tasks]
    requiredArtifacts: [requiredArtifacts]
    matchLabels: [matchLabels]
    avatarUrls: [avatarUrls]
    volumes: [volumes]
    priority: [priority]
    labels: [labels]
    outputs_manifests: [outputs_manifests]
    assignee: [assignee]
    conditions: [conditions]
    matchArtifact: [matchArtifact]
    deploy_server_groups: [deploy_server_groups]
    notifications: [notifications]
    status: [status]
    template: [template]
    jobStatus: [jobStatus]
    buildInfo: [buildInfo]
    pipeline_failed: [pipeline_failed]
    createdArtifacts: [createdArtifacts]
    ports: [ports]
    secretKeyRef: [secretKeyRef]
    deploy_jobs: [deploy_jobs]
    trafficManagement: [trafficManagement]
    variables: [variables]
    creator: [creator]
    reporter: [reporter]
    trigger: [trigger]
    aggregateprogress: [aggregateprogress]
    Pipeline: [Pipeline]
    customfield_10315: [customfield_10315]
    manifests: [manifests]
    outputs_boundArtifacts: [outputs_boundArtifacts]
    progress: [progress]
    supportedParams: [supportedParams]
    votes: [votes]
    worklog: [worklog]
    propertyFileContents: [propertyFileContents]
    outputs: [outputs]
    issuetype: [issuetype]
    webhook: [webhook]
    pipeline_complete: [pipeline_complete]
    nonEditableReason: [nonEditableReason]
    annotations: [annotations]
    project: [project]
    manifestNamesByNamespace: [manifestNamesByNamespace]
    body: [body]
    spec: [spec]
    volumeMounts: [volumeMounts]
    resolvedExpectedArtifacts: [resolvedExpectedArtifacts]
    kato_last_task_id: [kato_last_task_id]
    artifacts: [artifacts]
    parameterValues: [parameterValues]
    issuerestriction: [issuerestriction]
    watches: [watches]
    containerStatuses: [containerStatuses]
    history: [history]
    podIPs: [podIPs]
    configMap: [configMap]
    containers: [containers]
    fields: [fields]
    parameters: [parameters]
    completionDetails: [completionDetails]
    values: [values]
    outputs_manifestNamesByNamespace: [outputs_manifestNamesByNamespace]
    lastState: [lastState]
    boundArtifacts: [boundArtifacts]
    timetracking: [timetracking]
    outputs_createdArtifacts: [outputs_createdArtifacts]
    stableManifests: [stableManifests]
    pipeline_starting: [pipeline_starting]
    loadBalancer: [loadBalancer]
    resultObjects: [resultObjects]
    selector: [selector]
    rollingUpdate: [rollingUpdate]
    terminated: [terminated]
    customHeaders: [customHeaders]
    authentication: [authentication]
    expectedArtifacts: [expectedArtifacts]
    issuerestrictions: [issuerestrictions]
    headers: [headers]
    manifest: [manifest]
    resources: [resources]
    defaultArtifact: [defaultArtifact]
    monitor: [monitor]
    moniker: [moniker]
    boundArtifact: [boundArtifact]
    env: [env]
    message: [message]
    valueFrom: [valueFrom]
    optionalArtifacts: [optionalArtifacts]
    initialConfig: [initialConfig]
    deployedNamesByLocation: [deployedNamesByLocation]
    stages: [stages]
    pods: [pods]
    comment: [comment]
    strategy: [strategy]
    
}