input PipelineInput {
  type: String
  id: String
  application: String
  name: String
  buildTime: Float
  canceled: Boolean
  limitConcurrent: Boolean
  keepWaitingPipelines: Boolean
  startTime: Float
  endTime: Float
  status: String
  origin: String
  pipelineConfigId: String
  spelEvaluator: String
}

input TriggerInput {
  executionId: String
}

input StagesInput {
  id: String
  refId: String
  type: String
  name: String
  startTime: Float
  endTime: Float
  status: String
}

input OutputsInput {
  refId: String
  Buildnumber: String
  GitBranch: String
  GitRepo: String
  JobNumber: String
  canaryimage: String
  startTime: Float
  report: String
  hosturl: String
  key: String
  reason: String
  canaryReportURL: String
  overallScore: Float
  location: String
  trigger: String
  overallResult: String
  trigger_json: String
  executedBy: String
  message: String
  status: String
  comments: String
  navigationalURL: String
  cimage: String
  bimage: String
  prodimage: String
}

input ArtifactInput {
  refId: String
  customKind: Boolean
  location: String
  type: String
  version: String
  reference: String
  name: String
  artifactAccount: String
}

input StagesRelationshipInput {
  s1: String
  s2: String
}

type Mutation {
  createPipeline(input: PipelineInput): Pipeline @cypher(statement:
  """MERGE (p:Pipeline {type: input.type, id: input.id, application: input.application, name: input.name,
  buildTime: input.buildTime, canceled: input.canceled, limitConcurrent: input.limitConcurrent,
  keepWaitingPipelines: input.keepWaitingPipelines, startTime: input.startTime, endTime: input.endTime, status: input.status,
  origin: input.origin, pipelineConfigId: input.pipelineConfigId, spelEvaluator: input.spelEvaluator}) RETURN p""")
  createTrigger(input: TriggerInput): Trigger @cypher(statement:
  "MERGE (t:Trigger { executionId: input.executionId}) RETURN t")
  createStages(input: StagesInput): Stages @cypher(statement:
  """MERGE (s:Stages {id: input.id, refId: input.refId, type: input.type, name: input.name,
  startTime: input.startTime, endTime: input.endTime, status: input.status}) RETURN s""")
  createOutputs(input: OutputsInput): Outputs @cypher(statement:
  """CREATE (o:Outputs {Buildnumber: input.Buildnumber, GitBranch: input.GitBranch, GitRepo: input.GitRepo,
  JobNumber: input.JobNumber, canaryimage: input.canaryimage, startTime: input.startTime, report: input.report,
  hosturl: input.hosturl, key: input.key, reason: input.reason, canaryReportURL: input.canaryReportURL,
  overallScore: input.overallScore, location: input.location, trigger: input.trigger, overallResult: input.overallResult,
  trigger_json: input.trigger_json, executedBy: input.executedBy, message: input.message, status: input.status,
  comments: input.comments, navigationalURL: input.navigationalURL, cimage: input.cimage, bimage: input.bimage,
  prodimage: input.prodimage}) MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o) RETURN o""")

  createdArtifacts(input: ArtifactInput): Artifact @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:CREATED] -> (a)  RETURN a""")
  boundArtifacts(input: ArtifactInput): Artifact @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:BOUND] -> (a)  RETURN a""")
  optionalArtifacts(input: ArtifactInput): Artifact @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:OPTIONAL] -> (a)  RETURN a""")
  requiredArtifacts(input: ArtifactInput): Artifact @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:REQUIRED] -> (a)  RETURN a""")
  artifacts(input: ArtifactInput): Artifact @cypher(statement:
  """CREATE (a:Artifact {customKind: input.customKind, location: input.location, type: input.type,
  version: input.version, reference: input.reference, name: input.name, artifactAccount: input.artifactAccount})
  MERGE (s1:Stages { refId: input.refId}) MERGE (s1) - [:OUTPUTS] -> (o:Outputs) MERGE (o) - [:ARTIFACT] -> (a)  RETURN a""")

  createStageTimeline(input: StagesRelationshipInput): Stages @cypher(statement:
  "MERGE (s1:Stages { refId: input.s1}) MERGE (s2:Stages { refId: input.s2}) MERGE (s1) - [:NEXT] -> (s2) RETURN s2")
  createStageTrigger(input: StagesRelationshipInput): Stages @cypher(statement:
  "MERGE (s1:Trigger { executionId: input.s1}) MERGE (s2:Stages { refId: input.s2}) MERGE (s1) - [:NEXT] -> (s2) RETURN s2")
  createPipelineTrigger(input: StagesRelationshipInput): Pipeline @cypher(statement:
  "MERGE (s1:Trigger { executionId: input.s1}) MERGE (s2:Pipeline {id: input.s2}) MERGE (s2) - [:NEXT] -> (s1) RETURN s2")

  deleteAll: Pipeline @cypher(statement: "MATCH (a) DETACH DELETE a")
}

type Query {
  stages: [Stages]
}














type Pipelinefailed { text: String }

type Pipelinestarting { text: String }

type Pipelinecomplete { text: String }

type Message {
  pipelinefailed: Pipelinefailed
  pipelinestarting: Pipelinestarting
  pipelinecomplete: Pipelinecomplete
}

type Notifications { address: String
  level: String
  type: String
  when: [String]
  message: Message }

type Trigger {
  type: String
  user: String
  rebake: Boolean
  dryRun: Boolean
  strategy: Boolean
  executionId: String
  eventId: String
  enabled: Boolean
  preferred: Boolean
  expectedArtifacts: [String ]
  resolvedExpectedArtifacts: [String]
  notifications: [String ]
  artifacts: [String ]
  NextStage: [Stages] @relation(name: "NEXT_STAGE", direction:OUT)

}

type Authentication {
  user: String allowedAccounts: [String]

}

type Tasks {
  id: String
  implementingClass: String
  name: String
  startTime: Int
  endTime: Int
  status: String
  stageStart: Boolean
  stageEnd: Boolean
  loopStart: Boolean
  loopEnd: Boolean
}

type PropertyFileContents {
  GitRepo: String
  Buildnumber: String
  GitBranch: String
  JobNumber: String }

type Scm {
  name: String
  branch: String
  sha1: String
  remoteUrl: String
}

type Artifacts {
  fileName: String
  displayPath: String
  relativePath: String
  reference: String
  name: String
  type: String
  version: String
  decorated: Boolean
}

type Artifact {
  customKind: Boolean
  location: String
  type: String
  version: String
  reference: String
  name: String
}

type BuildInfo {
  building: Boolean
  fullDisplayName: String
  name: String
  number: Int
  duration: Int
  timestamp: String
  result: String
  url: String
  id: String
  scm: [Scm] @relation(name: "SUPPLY_CHAIN_MANAGEMENT", direction:IN)
  artifacts: [Artifacts] @relation(name: "ARTIFACTS", direction:IN)
}

type Outputs {
  Buildnumber: String
  GitBranch: String
  GitRepo: String
  JobNumber: String
  artifacts: [String]
  propertyFileContents: PropertyFileContents @relation(name: "GIT_INFO", direction:IN)
  buildInfo: BuildInfo @relation(name: "INFORMS_ABOUT", direction:IN)
}

type Context {
  propertyFile: String
  consecutiveErrors: Int
  queuedBuild: String
  Buildnumber: String
  GitBranch: String
  buildNumber: Int
  JobNumber: String
  master: String
  GitRepo: String
  failPipeline: Boolean
  job: String
  continuePipeline: Boolean
  propertyFileContents: PropertyFileContents @relation(name: "GIT_INFO", direction:IN)
  buildInfo: BuildInfo @relation(name: "INFORMS_ABOUT", direction:IN)
}

type Stages {
  id: String
  refId: String
  type: String
  name: String
  startTime: Int
  endTime: Int
  status: String
  requisiteStageRefIds: [String ]
  tasks: [Tasks] @relation(name: "REQUIRED_TASKS", direction:IN)
  outputs: Outputs @relation(name: "OUTPUTS", direction:OUT)
  context: Context @relation(name: "CONTEXTUALIZES", direction:IN)
  NextStage: [Stages] @relation(name: "NEXT_STAGE", direction:OUT)
}

type Pipeline {
  type: String
  id: String
  application: String
  name: String
  buildTime: Int
  canceled: Boolean
  limitConcurrent: Boolean
  keepWaitingPipelines: Boolean
  startTime: Int
  endTime: Int
  status: String
  origin: String
  pipelineConfigId: String
  spelEvaluator: String
  systemNotifications: [String ]
  notifications: [Notifications] @relation(name: "NOTIFIES", direction:IN)
  trigger: Trigger @relation(name: "TRIGGERS", direction:IN)
  authentication: Authentication @relation(name: "AUTHENTICATES", direction:IN)
  stages: [Stages] @relation(name: "STAGES", direction:IN)
}


