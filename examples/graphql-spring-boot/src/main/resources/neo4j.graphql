type outputs {
    id: String
    
}

type template {
    spec: spec @relation(name: "NEXT", direction: OUT)
    
}

type variables {
    value: String
    key: String
    
}

type metadata {
    name: String
    namespace: String
    
}

type pipelineParameters {
    tenant_ids: String
    env: String
    region: String
    manifest_id: String
    platform: String
    
}

type manifest {
    metadata: metadata @relation(name: "NEXT", direction: OUT)
    apiVersion: String
    kind: String
    spec: spec @relation(name: "NEXT", direction: OUT)
    
}

type imagePullSecrets {
    name: String
    
}

type trigger {
    nextStage: [stages] @relation(name: "NEXT", direction: OUT)
    expectedArtifacts: [String]
    eventId: String
    dryRun: Boolean
    rebake: Boolean
    type: String
    enabled: Boolean
    executionId: String
    resolvedExpectedArtifacts: [String]
    strategy: Boolean
    user: String
    parameters: parameters @relation(name: "NEXT", direction: OUT)
    notifications: [String]
    preferred: Boolean
    artifacts: [String]
    
}

type env {
    name: String
    value: String
    valueFrom: valueFrom @relation(name: "NEXT", direction: OUT)
    
}

type spec {
    template: template @relation(name: "NEXT", direction: OUT)
    backoffLimit: Float
    imagePullSecrets: [imagePullSecrets] @relation(name: "NEXT", direction: OUT)
    containers: [containers] @relation(name: "NEXT", direction: OUT)
    restartPolicy: String
    
}

type valueFrom {
    secretKeyRef: secretKeyRef @relation(name: "NEXT", direction: OUT)
    
}

type Pipeline {
    keepWaitingPipelines: Boolean
    pipelineConfigId: String
    systemNotifications: [String]
    buildTime: Float
    cancellationReason: String
    spelEvaluator: String
    origin: String
    canceledBy: String
    trigger: trigger @relation(name: "NEXT", direction: OUT)
    type: String
    canceled: Boolean
    limitConcurrent: Boolean
    application: String
    initialConfig: initialConfig @relation(name: "NEXT", direction: OUT)
    name: String
    stages: [stages] @relation(name: "NEXT", direction: OUT)
    id: String
    notifications: [String]
    status: String
    authentication: authentication @relation(name: "NEXT", direction: OUT)
    
}

type secretKeyRef {
    name: String
    key: String
    
}

type initialConfig {
    id: String
    
}

type preconditions {
    context: context @relation(name: "NEXT", direction: OUT)
    failPipeline: Boolean
    type: String
    
}

type stages {
    nextStage: stages @relation(name: "NEXT", direction: OUT)
    outputs: outputs @relation(name: "NEXT", direction: OUT)
    requisiteStageRefIds: [String]
    name: String
    context: context @relation(name: "NEXT", direction: OUT)
    id: String
    refId: String
    type: String
    tasks: [String]
    status: String
    
}

type context {
    variables: [variables] @relation(name: "NEXT", direction: OUT)
    comments: String
    propertyFile: String
    expression: String
    pipelineParameters: pipelineParameters @relation(name: "NEXT", direction: OUT)
    credentials: String
    manifest: String
    consumeArtifactSource: String
    source: String
    waitForCompletion: Boolean
    pipeline: String
    failOnFailedExpressions: Boolean
    application: String
    preconditions: [preconditions] @relation(name: "NEXT", direction: OUT)
    cloudProvider: String
    alias: String
    completeOtherBranchesThenFail: Boolean
    failPipeline: Boolean
    account: String
    continuePipeline: Boolean
    
}

type containers {
    image: String
    imagePullPolicy: String
    name: String
    env: String
    
}

type parameters {
    set_manifest_as_default: String
    debug: String
    manifest: String
    region: String
    env: String
    update_tenant_manifests: String
    platform: String
    
}

type authentication {
    allowedAccounts: [String]
    user: String
    
}

type Query {
    outputs: [outputs]
    template: [template]
    variables: [variables]
    metadata: [metadata]
    pipelineParameters: [pipelineParameters]
    manifest: [manifest]
    imagePullSecrets: [imagePullSecrets]
    trigger: [trigger]
    env: [env]
    spec: [spec]
    valueFrom: [valueFrom]
    Pipeline: [Pipeline]
    secretKeyRef: [secretKeyRef]
    initialConfig: [initialConfig]
    preconditions: [preconditions]
    stages: [stages]
    context: [context]
    containers: [containers]
    parameters: [parameters]
    authentication: [authentication]
    
}